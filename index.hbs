<!doctype html>
<html lang="en">
<html>
<head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
</head>
<body>

<nav class="navbar  navbar-expand-lg bg-body-tertiary">
    <div class="container">
        <a class="navbar-brand" href="/">RearGuard</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="/">Dashboard</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/apps-monitor">App Management</a>
                </li>

            </ul>

        </div>
    </div>
</nav>

<div class="container">

    <div class="content">
        <div id="error"></div>
        <h1>Resources Monitors</h1>
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">{{ data.osHostname }} - {{ data.osType }} ({{ data.osArch }})
                    ({{ data.osReleaseVersion }})</h3>
            </div>
            <div class="row">
                <div class="col-lg-6 panel-body">
                    <p class="text-center"><strong>System CPU</strong>: {{ data.osCPUs.0.model }}</p>
                    <div id="curve_chart" style="width: 100%"></div>
                </div>
                <div class="col-lg-6 panel-body">
                    <p class="text-center"><strong>Total memory</strong>: {{ data.osTotalMemory }}GB</p>
                    <div id="ram_chart" style="width: 100%"></div>
                </div>

            </div>
            <div class="row">
                <div class="col-lg-6 panel-body">
                    <p class="text-center"><strong>Read Disk</strong></p>
                    <div id="read_chart" style="width: 100%"></div>
                </div>
                <div class="col-lg-6 panel-body">
                    <p class="text-center"><strong>Write Disk</strong></p>
                    <div id="write_chart" style="width: 100%"></div>
                </div>

            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>
<script src="/socket.io/socket.io.js"></script>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
    (function () {
        'use strict';
        google.charts.load('current', {'packages': ['corechart']});
        google.charts.setOnLoadCallback(drawChart);
        let socket = io.connect('http://localhost:3001');
        let displayed;

        function drawChart() {
            var options = {
                title: 'CPU Load',
                curveType: 'function',
                legend: {position: 'bottom'},
                pointSize: 3,
                height: 400

            };
            var optionsRam = {
                title: 'Memory Load',
                curveType: 'function',
                legend: {position: 'bottom'},
                pointSize: 3,
                height: 400
            };

            let chart = new google.visualization.LineChart(document.getElementById('curve_chart'));
            let ramChart = new google.visualization.LineChart(document.getElementById('ram_chart'));
            let readChart = new google.visualization.LineChart(document.getElementById('read_chart'))
            let writeChart = new google.visualization.LineChart(document.getElementById('write_chart'))

            let dataArray = [['Time', 'CPU Average (%)'], [new Date(), 0]];
            let dataRamArray = [['Time', 'Used Memory (GB)'], [new Date(), 0]];
            let dataReadArray = [['Time', 'Disk Read (MB/s)'], [new Date(), 0]];
            let dataWriteArray = [['Time', 'Disk Write (KB/s)'], [new Date(), 0]];

            let data = google.visualization.arrayToDataTable(
                    dataArray
            );
            let dataRam = google.visualization.arrayToDataTable(dataRamArray);
            let dataRead = google.visualization.arrayToDataTable(dataReadArray)
            let dataWrite = google.visualization.arrayToDataTable(dataWriteArray)
            chart.draw(data, options);
            ramChart.draw(dataRam, optionsRam)
            readChart.draw(dataRead, {
                title: 'Disk Read',
                curveType: 'function',
                legend: {position: 'bottom'},
                pointSize: 3,
                height: 400
            });
            writeChart.draw(dataRead, {
                title: 'Disk Write',
                curveType: 'function',
                legend: {position: 'bottom'},
                pointSize: 3,
                height: 400
            });


            socket.on('resources', function (load) {
                dataArray.push([new Date(), load.cpu]);
                dataRamArray.push([new Date(), load.memory])
                dataReadArray.push([new Date(), load.readDisk])
                dataWriteArray.push([new Date(), load.writeDisk])
                data = google.visualization.arrayToDataTable(
                        dataArray
                );
                dataRam = google.visualization.arrayToDataTable(dataRamArray)
                dataRead = google.visualization.arrayToDataTable(dataReadArray)
                dataWrite = google.visualization.arrayToDataTable(dataWriteArray)


                chart.draw(data, options);
                ramChart.draw(dataRam, optionsRam);
                readChart.draw(dataRead, {
                    title: 'Disk Read',
                    curveType: 'function',
                    legend: {position: 'bottom'},
                    pointSize: 3,
                    height: 400
                })
                writeChart.draw(dataWrite, {
                    title: 'Disk Write',
                    curveType: 'function',
                    legend: {position: 'bottom'},
                    pointSize: 3,
                    height: 400
                })

                if (displayed) {
                    $('#error').empty();
                    displayed = false;
                }
            });

            socket.io.on('connect_error', function (error) {
                if (!displayed) {
                    $('#error').append('<div class="alert alert-danger" role="alert">Error connecting to socket! No data is collected.</div>');
                    displayed = true;
                }
            });
        }
    })();

</script>
</body>
</html>
